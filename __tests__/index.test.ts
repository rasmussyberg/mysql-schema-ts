import { createConnection } from 'mysql2'
import { query } from '../src/mysql-client'
import { inferTable, inferSchema } from '../src/table'
import { SQL as sql } from 'sql-template-strings'
import moment from 'moment'
import pkg from '../src/pkg.json'
import config from '../src/config'

const connectionString = 'mysql://root@localhost:33306/test'
const conn = createConnection(connectionString)

const agreements = sql`  
  CREATE TABLE agreements (                 
    id varbinary(24) NOT NULL,              
    billing_plan_id varbinary(24) NOT NULL, 
    category varbinary(24) NOT NULL,        
    name varbinary(64) NOT NULL, 
    PRIMARY KEY (id)                        
)`

const withNumbers = sql`  
  CREATE TABLE with_numbers (                 
    id int unsigned NOT NULL,              
    tiny tinyint NOT NULL,
    small smallint NOT NULL,
    medium mediumint NOT NULL, 
    big bigint NOT NULL, 
    flo float NOT NULL,
    dou double NOT NULL,
    PRIMARY KEY (id)                        
)`

const withJSON = sql`
  CREATE TABLE table_with_json (                 
    id varbinary(24) NOT NULL,              
    data json DEFAULT NULL,
    PRIMARY KEY (id)                        
)`

const requests = sql`
  CREATE TABLE requests (
    id int(11) NOT NULL,
    name varchar(255) NOT NULL,
    url varchar(255) NOT NULL,
    integration_type enum('source','destination') NOT NULL
  )
`

const complex = sql`
  CREATE TABLE complex (
    id varbinary(255) NOT NULL,
    name varchar(255) NOT NULL,
    nullable varchar(255),
    created_at timestamp DEFAULT now(),
    created_on date NOT NULL,
    documented_field varchar(255) COMMENT "This is an awesome field"
  )
`
const time = moment().format('YYYY-MM-DD')

beforeAll(async () => {
  await query(conn, sql`DROP TABLE IF EXISTS agreements`)
  await query(conn, sql`DROP TABLE IF EXISTS table_with_json`)
  await query(conn, sql`DROP TABLE IF EXISTS requests`)
  await query(conn, sql`DROP TABLE IF EXISTS complex`)
  await query(conn, sql`DROP TABLE IF EXISTS with_numbers`)
  await query(conn, agreements)
  await query(conn, requests)
  await query(conn, complex)
  await query(conn, withJSON)
  await query(conn, withNumbers)
})

beforeEach(async () => {
  config.binaryAsBuffer = false
  config.tinyIntAsBoolean = false
  config.nullAsUndefined = false
})

describe('inferTable', () => {
  it('infers a table', async () => {
    const code = await inferTable(connectionString, 'agreements')
    expect(code).toMatchInlineSnapshot(`
      "/**
       * AUTO-GENERATED FILE @ ${time} - DO NOT EDIT!
       *
       * This file was automatically generated by ${pkg.name} ${pkg.version}
       */

      /**
       * Exposes all fields present in agreements as a typescript
       * interface.
       * This is especially useful for SELECT * FROM
       */
      export interface Agreements {
        id: string
        billing_plan_id: string
        category: string
        name: string
      }

      /**
       * Exposes the same fields as Agreements,
       * but makes every field containing a DEFAULT value optional.
       *
       * This is especially useful when generating inserts, as you
       * should be able to ommit these fields if you'd like
       */
      export interface AgreementsWithDefaults {
        id: string
        billing_plan_id: string
        category: string
        name: string
      }
      "
    `)
  })

  it('works with enums', async () => {
    const code = await inferTable(connectionString, 'requests')
    expect(code).toMatchInlineSnapshot(`
      "/**
       * AUTO-GENERATED FILE @ ${time} - DO NOT EDIT!
       *
       * This file was automatically generated by ${pkg.name} ${pkg.version}
       */

      /**
       * Exposes all fields present in requests as a typescript
       * interface.
       * This is especially useful for SELECT * FROM
       */
      export interface Requests {
        id: number
        name: string
        url: string
        integration_type: 'source' | 'destination'
      }

      /**
       * Exposes the same fields as Requests,
       * but makes every field containing a DEFAULT value optional.
       *
       * This is especially useful when generating inserts, as you
       * should be able to ommit these fields if you'd like
       */
      export interface RequestsWithDefaults {
        id: number
        name: string
        url: string
        integration_type: 'source' | 'destination'
      }
      "
    `)
  })

  it('works with complex types', async () => {
    const code = await inferTable(connectionString, 'complex')
    expect(code).toMatchInlineSnapshot(`
      "/**
       * AUTO-GENERATED FILE @ ${time} - DO NOT EDIT!
       *
       * This file was automatically generated by ${pkg.name} ${pkg.version}
       */

      /**
       * Exposes all fields present in complex as a typescript
       * interface.
       * This is especially useful for SELECT * FROM
       */
      export interface Complex {
        id: string
        name: string
        nullable: string | null
        created_at: Date | null
        created_on: Date
        /** This is an awesome field  */
        documented_field: string | null
      }

      /**
       * Exposes the same fields as Complex,
       * but makes every field containing a DEFAULT value optional.
       *
       * This is especially useful when generating inserts, as you
       * should be able to ommit these fields if you'd like
       */
      export interface ComplexWithDefaults {
        id: string
        name: string
        nullable?: string | null
        /**  Defaults to: CURRENT_TIMESTAMP */
        created_at?: Date | null
        created_on: Date
        /** This is an awesome field  */
        documented_field?: string | null
      }
      "
    `)
  })

  it('works with JSON', async () => {
    const code = await inferTable(connectionString, 'table_with_json')
    expect(code).toMatchInlineSnapshot(`
      "/**
       * AUTO-GENERATED FILE @ ${time} - DO NOT EDIT!
       *
       * This file was automatically generated by ${pkg.name} ${pkg.version}
       */

      export type JSONPrimitive = string | number | boolean | null
      export type JSONValue = JSONPrimitive | JSONObject | JSONArray
      export type JSONObject = { [member: string]: JSONValue }
      export type JSONArray = Array<JSONValue>

      /**
       * Exposes all fields present in table_with_json as a typescript
       * interface.
       * This is especially useful for SELECT * FROM
       */
      export interface TableWithJson {
        id: string
        data: JSONValue | null
      }

      /**
       * Exposes the same fields as TableWithJson,
       * but makes every field containing a DEFAULT value optional.
       *
       * This is especially useful when generating inserts, as you
       * should be able to ommit these fields if you'd like
       */
      export interface TableWithJsonWithDefaults {
        id: string
        data?: JSONValue | null
      }
      "
    `)
  })

  it('works with binaryAsBuffer = true', async () => {
    config.binaryAsBuffer = true
    const code = await inferTable(connectionString, 'agreements')
    expect(code).toMatchInlineSnapshot(`
      "/**
       * AUTO-GENERATED FILE @ ${time} - DO NOT EDIT!
       *
       * This file was automatically generated by ${pkg.name} ${pkg.version}
       */

      /**
       * Exposes all fields present in agreements as a typescript
       * interface.
       * This is especially useful for SELECT * FROM
       */
      export interface Agreements {
        id: Buffer
        billing_plan_id: Buffer
        category: Buffer
        name: Buffer
      }

      /**
       * Exposes the same fields as Agreements,
       * but makes every field containing a DEFAULT value optional.
       *
       * This is especially useful when generating inserts, as you
       * should be able to ommit these fields if you'd like
       */
      export interface AgreementsWithDefaults {
        id: Buffer
        billing_plan_id: Buffer
        category: Buffer
        name: Buffer
      }
      "
    `)
  })

  it('works with tinyIntAsBoolean = false', async () => {
    const code = await inferTable(connectionString, 'with_numbers')
    expect(code).toMatchInlineSnapshot(`
      "/**
       * AUTO-GENERATED FILE @ ${time} - DO NOT EDIT!
       *
       * This file was automatically generated by ${pkg.name} ${pkg.version}
       */

      /**
       * Exposes all fields present in with_numbers as a typescript
       * interface.
       * This is especially useful for SELECT * FROM
       */
      export interface WithNumbers {
        id: number
        tiny: number
        small: number
        medium: number
        big: number
        flo: number
        dou: number
      }

      /**
       * Exposes the same fields as WithNumbers,
       * but makes every field containing a DEFAULT value optional.
       *
       * This is especially useful when generating inserts, as you
       * should be able to ommit these fields if you'd like
       */
      export interface WithNumbersWithDefaults {
        id: number
        tiny: number
        small: number
        medium: number
        big: number
        flo: number
        dou: number
      }
      "
    `)
  })

  it('works with tinyIntAsBoolean = true', async () => {
    config.tinyIntAsBoolean = true
    const code = await inferTable(connectionString, 'with_numbers')
    expect(code).toMatchInlineSnapshot(`
      "/**
       * AUTO-GENERATED FILE @ ${time} - DO NOT EDIT!
       *
       * This file was automatically generated by ${pkg.name} ${pkg.version}
       */

      /**
       * Exposes all fields present in with_numbers as a typescript
       * interface.
       * This is especially useful for SELECT * FROM
       */
      export interface WithNumbers {
        id: number
        tiny: boolean
        small: number
        medium: number
        big: number
        flo: number
        dou: number
      }

      /**
       * Exposes the same fields as WithNumbers,
       * but makes every field containing a DEFAULT value optional.
       *
       * This is especially useful when generating inserts, as you
       * should be able to ommit these fields if you'd like
       */
      export interface WithNumbersWithDefaults {
        id: number
        tiny: boolean
        small: number
        medium: number
        big: number
        flo: number
        dou: number
      }
      "
    `)
  })
  it('works with nullAsUndefined = true', async () => {
    config.nullAsUndefined = true
    const code = await inferTable(connectionString, 'complex')
    expect(code).toMatchInlineSnapshot(`
      "/**
       * AUTO-GENERATED FILE @ ${time} - DO NOT EDIT!
       *
       * This file was automatically generated by ${pkg.name} ${pkg.version}
       */

      /**
       * Exposes all fields present in complex as a typescript
       * interface.
       * This is especially useful for SELECT * FROM
       */
      export interface Complex {
        id: string
        name: string
        nullable?: string
        created_at?: Date
        created_on: Date
        /** This is an awesome field  */
        documented_field?: string
      }

      /**
       * Exposes the same fields as Complex,
       * but makes every field containing a DEFAULT value optional.
       *
       * This is especially useful when generating inserts, as you
       * should be able to ommit these fields if you'd like
       */
      export interface ComplexWithDefaults {
        id: string
        name: string
        nullable?: string | null
        /**  Defaults to: CURRENT_TIMESTAMP */
        created_at?: Date | null
        created_on: Date
        /** This is an awesome field  */
        documented_field?: string | null
      }
      "
    `)
  })
})

describe('inferSchema', () => {
  it('infers all tables at once', async () => {
    const code = await inferSchema(connectionString)
    expect(code).toMatchInlineSnapshot(`
      "/**
       * AUTO-GENERATED FILE @ ${time} - DO NOT EDIT!
       *
       * This file was automatically generated by ${pkg.name} ${pkg.version}
       */

      export type JSONPrimitive = string | number | boolean | null
      export type JSONValue = JSONPrimitive | JSONObject | JSONArray
      export type JSONObject = { [member: string]: JSONValue }
      export type JSONArray = Array<JSONValue>

      /**
       * Exposes all fields present in agreements as a typescript
       * interface.
       * This is especially useful for SELECT * FROM
       */
      export interface Agreements {
        id: string
        billing_plan_id: string
        category: string
        name: string
      }

      /**
       * Exposes the same fields as Agreements,
       * but makes every field containing a DEFAULT value optional.
       *
       * This is especially useful when generating inserts, as you
       * should be able to ommit these fields if you'd like
       */
      export interface AgreementsWithDefaults {
        id: string
        billing_plan_id: string
        category: string
        name: string
      }

      /**
       * Exposes all fields present in complex as a typescript
       * interface.
       * This is especially useful for SELECT * FROM
       */
      export interface Complex {
        id: string
        name: string
        nullable: string | null
        created_at: Date | null
        created_on: Date
        /** This is an awesome field  */
        documented_field: string | null
      }

      /**
       * Exposes the same fields as Complex,
       * but makes every field containing a DEFAULT value optional.
       *
       * This is especially useful when generating inserts, as you
       * should be able to ommit these fields if you'd like
       */
      export interface ComplexWithDefaults {
        id: string
        name: string
        nullable?: string | null
        /**  Defaults to: CURRENT_TIMESTAMP */
        created_at?: Date | null
        created_on: Date
        /** This is an awesome field  */
        documented_field?: string | null
      }

      /**
       * Exposes all fields present in requests as a typescript
       * interface.
       * This is especially useful for SELECT * FROM
       */
      export interface Requests {
        id: number
        name: string
        url: string
        integration_type: 'source' | 'destination'
      }

      /**
       * Exposes the same fields as Requests,
       * but makes every field containing a DEFAULT value optional.
       *
       * This is especially useful when generating inserts, as you
       * should be able to ommit these fields if you'd like
       */
      export interface RequestsWithDefaults {
        id: number
        name: string
        url: string
        integration_type: 'source' | 'destination'
      }

      /**
       * Exposes all fields present in table_with_json as a typescript
       * interface.
       * This is especially useful for SELECT * FROM
       */
      export interface TableWithJson {
        id: string
        data: JSONValue | null
      }

      /**
       * Exposes the same fields as TableWithJson,
       * but makes every field containing a DEFAULT value optional.
       *
       * This is especially useful when generating inserts, as you
       * should be able to ommit these fields if you'd like
       */
      export interface TableWithJsonWithDefaults {
        id: string
        data?: JSONValue | null
      }

      /**
       * Exposes all fields present in with_numbers as a typescript
       * interface.
       * This is especially useful for SELECT * FROM
       */
      export interface WithNumbers {
        id: number
        tiny: number
        small: number
        medium: number
        big: number
        flo: number
        dou: number
      }

      /**
       * Exposes the same fields as WithNumbers,
       * but makes every field containing a DEFAULT value optional.
       *
       * This is especially useful when generating inserts, as you
       * should be able to ommit these fields if you'd like
       */
      export interface WithNumbersWithDefaults {
        id: number
        tiny: number
        small: number
        medium: number
        big: number
        flo: number
        dou: number
      }
      "
    `)
  })
})
